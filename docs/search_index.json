[
["index.html", "Dragon Ecology in Utah Chapter 1 Introduction 1.1 Project Goals 1.2 Project Outline", " Dragon Ecology in Utah Simona Picardi 2021-03-23 Chapter 1 Introduction This research is focused on the ecology of dragons in Utah. Dragons are heavily understudied and this is the first research ever conducted about them. I will focus on answering questions related to their diet, life history, and movement ecology. 1.1 Project Goals The goal of this project is to answer a few specific questions: Assess whether dragon species that originally evolved in different continents have different body characteristics; Quantify the diet composition of adult dragons in Utah; Map movements of dragons in Utah. 1.2 Project Outline This book is composed of the following Chapters: Chapter 2, Database Creation Chapter 3, Body Characheristics of Dragon Species Evolved in Different Continents Chapter 4, Diet Composition of Adult Dragons in Utah Chapter 5, Movements of Dragons in Utah "],
["db.html", "Chapter 2 Database creation", " Chapter 2 Database creation We collected data of multiple types on dragons in Utah. First, we captured dragons at 5 different sites across the state. Some of these dragons were equipped with GPS-tracking devices to study their movements. Whenever possible, we measured dragons before releasing them and collected information on their age class, species, and sex. We also collected diet samples we found across the landscape in the form of regurgitations and classified the single items found within each sample. Capture was not necessary to obtain diet samples. We used a relational database to house our data. Our database structure looks like this: Figure 2.1: Diagram of the dragons database The database is composed of 9 tables. The dragons table includes individual information on the sample individuals. The captures table contains information on when and where each dragon was captured, and it’s linked to the capture sites table which stores the coordinates of each capture site. The morphometrics table contains body measurements and the diet table contains information on diet samples. Both of these are linked to the dragons table based on individual IDs. We also tracked some of these dragons, so we have a tags table which lists all the different GPS units we deployed within the project. The deployments table tells us which dragon was wearing each tag at any given time, and therefore it’s linked to both the dragons and the tags table through the dragon IDs and the tag IDs, respectively. A raw GPS data table contains telemetry data in its raw form, i.e., as it comes out of the tags, and it’s therefore linked to the tags table via the tag ID. Finally, a processed GPS data table associates the tracking data to the dragons. Primary keys are in italics and foreign keys are in bold. Connectors link tables with one another based on their foreign keys. We created the database in RSQLite. library(DBI) dragons_db &lt;- dbConnect(RSQLite::SQLite(), &quot;../../Course Material/Data/dragons/dragons.db&quot;) 2.0.1 Dragons First, we created the dragons table, which stores information on every single dragon individual we have any type of data for: dbExecute(dragons_db, &quot;CREATE TABLE dragons ( dragon_id varchar(5) NOT NULL, sex char(1) CHECK (sex IN (&#39;M&#39;, &#39;F&#39;)), age_class varchar(8) CHECK (age_class IN (&#39;Juvenile&#39;, &#39;Subadult&#39;, &#39;Adult&#39;)), species varchar(50), PRIMARY KEY (dragon_id) );&quot;) dragons &lt;- read.csv(&quot;../../Course Material/Data/dragons/dragons.csv&quot;, stringsAsFactors = FALSE) names(dragons) ## [1] &quot;dragon&quot; &quot;sex&quot; &quot;age_class&quot; &quot;species&quot; names(dragons)[1] &lt;- &quot;dragon_id&quot; And imported data into it: dbWriteTable(dragons_db, &quot;dragons&quot;, dragons, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM dragons LIMIT 10;&quot;) ## dragon_id sex age_class species update_timestamp ## 1 D1 F Subadult Hebridean Black &lt;NA&gt; ## 2 D2 &lt;NA&gt; Juvenile Romanian Longhorn &lt;NA&gt; ## 3 D3 F Adult Hebridean Black &lt;NA&gt; ## 4 D4 F Adult Peruvian Vipertooth &lt;NA&gt; ## 5 D5 &lt;NA&gt; Juvenile Ukrainian Ironbelly &lt;NA&gt; ## 6 D6 F Adult Norwegian Ridgeback &lt;NA&gt; ## 7 D7 M Adult Hebridean Black &lt;NA&gt; ## 8 D8 &lt;NA&gt; Juvenile Peruvian Vipertooth &lt;NA&gt; ## 9 D9 F Adult Norwegian Ridgeback &lt;NA&gt; ## 10 D10 F Adult Common Welsh Green &lt;NA&gt; 2.0.2 Tags Then we created a table that stores information on the GPS tags: dbExecute(dragons_db, &quot;CREATE TABLE tags ( tag_id char(6) NOT NULL PRIMARY KEY, brand varchar(50), status varchar(20) );&quot;) And imported data into it: tags &lt;- read.csv(&quot;../../Course Material/Data/dragons/tags.csv&quot;) dbWriteTable(dragons_db, &quot;tags&quot;, tags, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM tags LIMIT 10;&quot;) ## tag_id brand status ## 1 N33529 Heatwave Telemetry Refurbished ## 2 J47978 Undertone New ## 3 R61684 Heatwave Telemetry New ## 4 B35524 Aerotronic New ## 5 T55954 Aerotronic New ## 6 O31688 Undertone New ## 7 B61925 Undertone New ## 8 P47677 Aerotronic New ## 9 P35987 Aerotronic New ## 10 I41609 Heatwave Telemetry Refurbished 2.0.3 Capture sites Then, we created a table to store information on the capture sites: dbExecute(dragons_db, &quot;CREATE TABLE capture_sites ( site char(3) NOT NULL PRIMARY KEY, utm_x double, utm_y double );&quot;) And imported data into it: capture_sites &lt;- read.csv(&quot;../../Course Material/Data/dragons/capture_sites.csv&quot;) names(capture_sites)[2:3] &lt;- c(&quot;utm_x&quot;, &quot;utm_y&quot;) dbWriteTable(dragons_db, &quot;capture_sites&quot;, capture_sites, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM capture_sites;&quot;) ## site utm_x utm_y ## 1 LOG 430659 4620909 ## 2 SLC 424790 4512583 ## 3 MOA 626325 4270426 ## 4 STG 271064 4108535 ## 5 DLT 364106 4357045 2.0.4 Captures Then, we created a table that details each capture event: dbExecute(dragons_db, &quot;CREATE TABLE captures ( capture_id INTEGER PRIMARY KEY AUTOINCREMENT, dragon_id varchar(5), date text, site char(3), FOREIGN KEY(dragon_id) REFERENCES dragons(dragon_id) FOREIGN KEY(site) REFERENCES capture_sites(site) );&quot;) captures &lt;- read.csv(&quot;../../Course Material/Data/dragons/captures.csv&quot;) captures$capture_id &lt;- 1:nrow(captures) captures &lt;- captures[, c(&quot;capture_id&quot;, &quot;dragon&quot;, &quot;capture_date&quot;, &quot;capture_site&quot;)] names(captures)[2:4] &lt;- c(&quot;dragon_id&quot;, &quot;date&quot;, &quot;site&quot;) And imported data into it: dbWriteTable(dragons_db, &quot;captures&quot;, captures, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM captures LIMIT 10;&quot;) ## capture_id dragon_id date site ## 1 1 D1 2012-08-10 MOA ## 2 2 D2 2013-07-23 MOA ## 3 3 D3 2016-10-19 SLC ## 4 4 D4 2001-01-10 LOG ## 5 5 D5 2000-09-28 MOA ## 6 6 D6 2016-02-25 LOG ## 7 7 D7 2012-11-05 MOA ## 8 8 D8 2009-07-14 LOG ## 9 9 D9 2001-08-17 STG ## 10 10 D10 2017-01-17 LOG 2.0.5 Morphometrics Then we created a table to store data on morphometric measurements: dbExecute(dragons_db, &quot;CREATE TABLE morphometrics ( measurement_id INTEGER PRIMARY KEY AUTOINCREMENT, dragon_id varchar(5), date text, total_body_length_cm float, wingspan_cm float, tail_length_cm float, tarsus_length_cm float, claw_length_cm float, FOREIGN KEY (dragon_id) REFERENCES dragons(dragon_id) );&quot;) And imported data into it: # Load csv file morphometrics &lt;- read.csv(&quot;../../Course Material/Data/dragons/morphometrics.csv&quot;) # Add auto-incremental number morphometrics$measurement_id &lt;- 1:nrow(morphometrics) # Re-order columns morphometrics &lt;- morphometrics[, c(&quot;measurement_id&quot;, &quot;dragon&quot;, &quot;date&quot;, &quot;total_body_length_cm&quot;, &quot;wingspan_cm&quot;, &quot;tail_length_cm&quot;, &quot;tarsus_length_cm&quot;, &quot;claw_length_cm&quot;)] # Change column names to match names(morphometrics)[2] &lt;- &quot;dragon_id&quot; # Append to database table dbWriteTable(dragons_db, &quot;morphometrics&quot;, morphometrics, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM morphometrics LIMIT 10;&quot;) ## measurement_id dragon_id date total_body_length_cm wingspan_cm ## 1 1 D96 2012-10-10 1069.8965 1389.5527 ## 2 2 D400 2003-07-03 333.4600 634.9109 ## 3 3 D316 2017-09-08 866.8935 1052.3702 ## 4 4 D317 2016-09-05 1146.9708 1356.8084 ## 5 5 D484 2016-12-04 1032.0520 1720.8641 ## 6 6 D149 2012-02-13 919.9908 1533.5991 ## 7 7 D285 2016-03-23 304.8285 698.8157 ## 8 8 D256 2013-09-07 358.9701 652.0053 ## 9 9 D283 2007-06-21 1698.1918 1387.1943 ## 10 10 D213 2001-12-12 353.6952 670.5283 ## tail_length_cm tarsus_length_cm claw_length_cm ## 1 595.2706 121.65175 15.596219 ## 2 104.2241 38.10844 4.305086 ## 3 373.7619 68.16869 12.719697 ## 4 542.5670 172.43663 14.809363 ## 5 596.4419 114.05057 11.985672 ## 6 563.9201 134.18051 11.005070 ## 7 115.8964 42.18657 5.041634 ## 8 148.3656 43.57849 4.576640 ## 9 666.4246 147.44219 13.189233 ## 10 140.4342 43.60513 4.248564 2.0.6 Diet Then we created a table to store our diet data: dbExecute(dragons_db, &quot;CREATE TABLE diet ( diet_id INTEGER PRIMARY KEY AUTOINCREMENT, dragon_id varchar(5), sample_id varchar(8), date text, item_id integer, item varchar(50), FOREIGN KEY (dragon_id) REFERENCES dragons(dragon_id) );&quot;) And imported data into it: diet &lt;- read.csv(&quot;../../Course Material/Data/dragons/diet.csv&quot;) diet$diet_id &lt;- 1:nrow(diet) diet &lt;- diet[, c(&quot;diet_id&quot;, &quot;dragon&quot;, &quot;sample_id&quot;, &quot;sample_dates&quot;, &quot;item_id&quot;, &quot;item&quot;)] names(diet)[c(2, 4)] &lt;- c(&quot;dragon_id&quot;, &quot;date&quot;) dbWriteTable(dragons_db, &quot;diet&quot;, diet, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM diet LIMIT 10;&quot;) ## diet_id dragon_id sample_id date item_id item ## 1 1 D221 D221-1 2017-11-22 1 Domestic cow ## 2 2 D221 D221-1 2017-11-22 2 Domestic goat ## 3 3 D221 D221-1 2017-11-22 3 Coyote ## 4 4 D221 D221-1 2017-11-22 4 Domestic cow ## 5 5 D221 D221-1 2017-11-22 5 Domestic cow ## 6 6 D221 D221-1 2017-11-22 6 Mule deer ## 7 7 D119 D119-1 2012-06-28 1 Mule deer ## 8 8 D119 D119-1 2012-06-28 2 Cougar ## 9 9 D119 D119-1 2012-06-28 3 Domestic goat ## 10 10 D119 D119-1 2012-06-28 4 Mountain goat 2.0.7 Deployments Then we created a table to store deployment information: dbExecute(dragons_db, &quot;CREATE TABLE deployments ( deployment_id INTEGER PRIMARY KEY AUTOINCREMENT, dragon_id varchar(5), tag_id char(6), start_deployment text, end_deployment text, FOREIGN KEY(dragon_id) REFERENCES dragons(dragon_id) FOREIGN KEY(tag_id) REFERENCES tags(tag_id) );&quot;) And imported data into it: deployments &lt;- read.csv(&quot;../../Course Material/Data/dragons/deployments.csv&quot;) deployments$deployment_id &lt;- 1:nrow(deployments) deployments &lt;- deployments[, c(&quot;deployment_id&quot;, &quot;dragon&quot;, &quot;tag&quot;, &quot;start_deploy&quot;, &quot;end_deploy&quot;)] names(deployments)[2:5] &lt;- c(&quot;dragon_id&quot;, &quot;tag_id&quot;, &quot;start_deployment&quot;, &quot;end_deployment&quot;) dbWriteTable(dragons_db, &quot;deployments&quot;, deployments, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM deployments LIMIT 10;&quot;) ## deployment_id dragon_id tag_id start_deployment end_deployment ## 1 1 D486 N33529 2006-12-20 2007-07-04 ## 2 2 D393 J47978 2008-01-13 2008-10-13 ## 3 3 D88 R61684 2004-09-19 2004-12-01 ## 4 4 D330 B35524 2015-11-21 2016-08-02 ## 5 5 D478 T55954 2002-05-07 2002-10-26 ## 6 6 D300 O31688 2006-01-20 2006-08-23 ## 7 7 D380 B61925 2015-01-27 2015-10-21 ## 8 8 D315 P47677 2006-03-03 2006-06-06 ## 9 9 D209 P35987 2007-02-26 2007-05-31 ## 10 10 D357 I41609 2013-09-09 2014-03-08 2.0.8 GPS-tracking data Then we created a table to store the GPS tracking data as it comes out of the tags: dbExecute(dragons_db, &quot;CREATE TABLE gps_data_raw ( gps_id INTEGER PRIMARY KEY AUTOINCREMENT, tag_id char(6), timestamp text, utm_x double, utm_y double, FOREIGN KEY(tag_id) REFERENCES tags(tag_id) );&quot;) And imported data into it: gps_data_raw &lt;- read.csv(&quot;../../Course Material/Data/dragons/telemetry_raw.csv&quot;) gps_data_raw$gps_id &lt;- 1:nrow(gps_data_raw) gps_data_raw &lt;- gps_data_raw[, c(&quot;gps_id&quot;, &quot;tag&quot;, &quot;timestamp&quot;, &quot;x&quot;, &quot;y&quot;)] names(gps_data_raw)[c(2, 4, 5)] &lt;- c(&quot;tag_id&quot;, &quot;utm_x&quot;, &quot;utm_y&quot;) dbWriteTable(dragons_db, &quot;gps_data_raw&quot;, gps_data_raw, append = TRUE) dbGetQuery(dragons_db, &quot;SELECT * FROM gps_data_raw LIMIT 10;&quot;) ## gps_id tag_id timestamp utm_x utm_y ## 1 1 N33529 2006-12-20 00:02:03 626479.9 4270480 ## 2 2 N33529 2006-12-20 03:02:01 628321.6 4271404 ## 3 3 N33529 2006-12-20 06:00:45 628111.1 4271812 ## 4 4 N33529 2006-12-20 08:59:56 628294.4 4271940 ## 5 5 N33529 2006-12-20 12:02:14 628642.2 4273090 ## 6 6 N33529 2006-12-20 15:00:12 628750.1 4273879 ## 7 7 N33529 2006-12-20 18:00:29 625775.1 4272723 ## 8 8 N33529 2006-12-20 20:59:54 625682.6 4272723 ## 9 9 N33529 2006-12-21 00:02:12 625493.0 4272917 ## 10 10 N33529 2006-12-21 03:01:18 628051.1 4272672 Finally, we were able to generate a table that automatically associates raw GPS data to the right individual by intersecting the date each location was taken with the ID of the individual that was wearing that tag at that time: dbExecute(dragons_db, &quot;CREATE TABLE gps_data ( loc_id INTEGER PRIMARY KEY, tag_id char(6), dragon_id varchar(5), timestamp text, utm_x double, utm_y double, FOREIGN KEY (tag_id) REFERENCES tags(tag_id) FOREIGN KEY (dragon_id) REFERENCES dragons(dragon_id) );&quot;) dbExecute(dragons_db, &quot;INSERT INTO gps_data ( tag_id, dragon_id, timestamp, utm_x, utm_y) SELECT deployments.tag_id, deployments.dragon_id, gps_data_raw.timestamp, gps_data_raw.utm_x, gps_data_raw.utm_y FROM deployments LEFT JOIN gps_data_raw USING (tag_id) WHERE gps_data_raw.tag_id = deployments.tag_id AND ( ( (strftime(gps_data_raw.timestamp) &gt;= strftime(deployments.start_deployment)) AND (strftime(gps_data_raw.timestamp) &lt;= strftime(deployments.end_deployment)) ) OR ( (gps_data_raw.timestamp &gt;= deployments.start_deployment) AND (deployments.end_deployment IS NULL) ) );&quot;) dbGetQuery(dragons_db, &quot;SELECT * FROM gps_data LIMIT 10;&quot;) ## loc_id tag_id dragon_id timestamp utm_x utm_y ## 1 1 N33529 D486 2006-12-20 00:02:03 626479.9 4270480 ## 2 2 N33529 D486 2006-12-20 03:02:01 628321.6 4271404 ## 3 3 N33529 D486 2006-12-20 06:00:45 628111.1 4271812 ## 4 4 N33529 D486 2006-12-20 08:59:56 628294.4 4271940 ## 5 5 N33529 D486 2006-12-20 12:02:14 628642.2 4273090 ## 6 6 N33529 D486 2006-12-20 15:00:12 628750.1 4273879 ## 7 7 N33529 D486 2006-12-20 18:00:29 625775.1 4272723 ## 8 8 N33529 D486 2006-12-20 20:59:54 625682.6 4272723 ## 9 9 N33529 D486 2006-12-21 00:02:12 625493.0 4272917 ## 10 10 N33529 D486 2006-12-21 03:01:18 628051.1 4272672 "],
["morph.html", "Chapter 3 Body Characteristics of Dragon Species Evolved in Different Continents", " Chapter 3 Body Characteristics of Dragon Species Evolved in Different Continents Dragons found today in Utah belong to 10 different species that evolved in different parts of the world. dragons %&gt;% pull(species) %&gt;% unique() ## [1] &quot;Hebridean Black&quot; &quot;Romanian Longhorn&quot; &quot;Peruvian Vipertooth&quot; ## [4] &quot;Ukrainian Ironbelly&quot; &quot;Norwegian Ridgeback&quot; &quot;Common Welsh Green&quot; ## [7] &quot;Swedish Short-Snout&quot; &quot;Chinese Fireball&quot; &quot;Hungarian Horntail&quot; ## [10] &quot;Antipodean Opaleye&quot; Previous literature has shown that closeness of geographic origin corresponds to taxonomic relatedness. Based on this, we hypothesized that dragons that evolved in the same continent would be more similar in morphometrics characteristics than dragons that evolved in different continents, because they are taxonomically more distant. Many of the species that today live in Utah evolved in Europe. We want to compare these dragons to those who evolved in South America, Asia, and Oceania, even though we only have one representative species for each of those continents. We expect European dragon species to be more similar between each other than to other dragon species in body size. Let’s reclassify dragons based on the continent where they evolved: dragons &lt;- dragons %&gt;% mutate(continent = case_when( species %in% c(&quot;Hebridean Black&quot;, &quot;Romanian Longhorn&quot;, &quot;Ukrainian Ironbelly&quot;, &quot;Norwegian Ridgeback&quot;, &quot;Common Welsh Green&quot;, &quot;Swedish Short-Snout&quot;, &quot;Hungarian Horntail&quot;) ~ &quot;Europe&quot;, species == &quot;Peruvian Vipertooth&quot; ~ &quot;South America&quot;, species == &quot;Chinese Fireball&quot; ~ &quot;Asia&quot;, species == &quot;Antipodean Opaleye&quot; ~ &quot;Oceania&quot; )) Now let’s plot mean body size of adult dragons by species and continent of origin: reordered_levels &lt;- dragons %&gt;% select(species, continent) %&gt;% distinct() %&gt;% arrange(continent) %&gt;% pull(species) morphometrics %&gt;% left_join(dragons, by = &quot;dragon_id&quot;) %&gt;% filter(age_class == &quot;Adult&quot;) %&gt;% group_by(species, continent) %&gt;% summarize(mean_body_size = mean(total_body_length_cm, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(species = factor(species, levels = reordered_levels)) %&gt;% ggplot(aes(x = species, y = mean_body_size, fill = continent)) + geom_bar(stat = &quot;identity&quot;) + labs(x = &quot; &quot;, y = &quot;Mean body size (cm)&quot;, fill = &quot;Continent&quot;) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. Let’s do the same thing with wingspan: morphometrics %&gt;% left_join(dragons, by = &quot;dragon_id&quot;) %&gt;% filter(age_class == &quot;Adult&quot;) %&gt;% group_by(species, continent) %&gt;% summarize(mean_wingspan = mean(wingspan_cm, na.rm = TRUE)) %&gt;% ungroup() %&gt;% mutate(species = factor(species, levels = reordered_levels)) %&gt;% ggplot(aes(x = species, y = mean_wingspan, fill = continent)) + geom_bar(stat = &quot;identity&quot;) + labs(x = &quot; &quot;, y = &quot;Mean wingspan (cm)&quot;, fill = &quot;Continent&quot;) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) ## `summarise()` has grouped output by &#39;species&#39;. You can override using the `.groups` argument. It looks like our hypothesis was wrong. Dragons from Europe do not seem to differ more from dragons from other continents than they do between each other. "],
["diet-comp.html", "Chapter 4 Diet Composition of Adult Dragons in Utah", " Chapter 4 Diet Composition of Adult Dragons in Utah Dragons have been documented to prey on livestock in Utah, but so far no data existed to demonstrate whether dragons also prey on other animals and in what proportion. Here, we look at diet composition of adult dragons in Utah, and we explore the correlation between the proportion of livestock in the diet and the body size adult dragons reach. diet %&gt;% left_join(dragons, by = &quot;dragon_id&quot;) %&gt;% filter(age_class == &quot;Adult&quot;) %&gt;% group_by(item) %&gt;% tally() %&gt;% mutate(prop = n/nrow(diet)) %&gt;% ggplot(aes(x = item, y = prop)) + geom_bar(stat = &quot;identity&quot;) + labs(x = &quot; &quot;, y = &quot;Proportion&quot;, fill = &quot;Type&quot;) + theme_bw() While domestic goats are the main diet item found in dragon diet samples, followed by domestic cows, dragon diet also includes wild animals such as mule deer, mountain goat, moose, and (rarely) even coyote and cougar. Let’s explore how livestock consumption relates with body measurements at maturity: totals &lt;- diet %&gt;% group_by(dragon_id) %&gt;% tally() %&gt;% rename(tot = n) diet %&gt;% mutate(livestock = case_when( item %in% c(&quot;Cougar&quot;, &quot;Coyote&quot;, &quot;Moose&quot;, &quot;Mountain goat&quot;, &quot;Mule deer&quot;) ~ FALSE, TRUE ~ TRUE )) %&gt;% group_by(dragon_id, livestock) %&gt;% tally() %&gt;% left_join(totals, by = &quot;dragon_id&quot;) %&gt;% filter(livestock) %&gt;% mutate(prop_livestock = n/tot) %&gt;% left_join(dragons, by = &quot;dragon_id&quot;) %&gt;% filter(age_class == &quot;Adult&quot;) %&gt;% left_join(morphometrics, by = &quot;dragon_id&quot;) %&gt;% ggplot(aes(x = prop_livestock, y = total_body_length_cm)) + geom_point() + labs(x = &quot;Proportion of livestock in diet&quot;, y = &quot;Total body length (cm)&quot;) + theme_bw() ## Warning: Removed 48 rows containing missing values (geom_point). It looks like high livestock consumption correlates with increased body size in adult dragons. "],
["mov.html", "Chapter 5 Movements of Dragons in Utah", " Chapter 5 Movements of Dragons in Utah Ours is the first ever GPS-tracking study of dragons. We are excited to be able to share the first ever map of dragon movements in Utah: telemetry %&gt;% left_join(captures, by = &quot;dragon_id&quot;) %&gt;% rename(x = utm_x, y = utm_y) %&gt;% ggplot(aes(x = x, y = y, color = site)) + geom_path() + geom_point(data = capture_sites, mapping = aes(x = utm_x, y = utm_y), color = &quot;black&quot;, size = 2) + labs(x = &quot;UTM Easting&quot;, y = &quot;UTM Northing&quot;) + theme_bw() "]
]
